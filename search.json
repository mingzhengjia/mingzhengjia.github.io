[{"title":"SVN服务器搭建","url":"http://mingzhengjia.coding.me/2017/03/10/SVN服务器搭建/","content":"<h1 id=\"SVN服务器搭建\"><a href=\"#SVN服务器搭建\" class=\"headerlink\" title=\"SVN服务器搭建\"></a>SVN服务器搭建</h1><h2 id=\"准备工具\"><a href=\"#准备工具\" class=\"headerlink\" title=\"准备工具\"></a>准备工具</h2><h1 id=\"Windows-安装\"><a href=\"#Windows-安装\" class=\"headerlink\" title=\"Windows 安装\"></a>Windows 安装</h1><p>1.CollabNetSubversionEdge<br>CollabNetSubversionEdge-5.1.1_setup-x86_64<br>2.JAVA jdk </p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>1.首先安装java必要组件。<br>2.安装CollabNetSubversionEdge，一路继续。</p>\n<h1 id=\"服务器管理。\"><a href=\"#服务器管理。\" class=\"headerlink\" title=\"服务器管理。\"></a>服务器管理。</h1><p>访问地址<a href=\"http://localhost:3343/csvn/\" target=\"_blank\" rel=\"external\">http://localhost:3343/csvn/</a></p>\n<p>1.配置主机名<br>2.版本库父文件夹<br>3.版本库父文件夹<br>4.端口号</p>\n<h1 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h1><p>1.点击用户管理。<br>根据提示创建用户的权限等等，</p>\n<h1 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h1><p>1.点击版本库<br>根据提示创建版本库。</p>\n<h1 id=\"客户端访问\"><a href=\"#客户端访问\" class=\"headerlink\" title=\"客户端访问\"></a>客户端访问</h1><p>访问地址 <a href=\"http://TESTSWSVN:8081/svn/TestCode\" target=\"_blank\" rel=\"external\">http://TESTSWSVN:8081/svn/TestCode</a></p>\n<p>根据提示输入用户名等。</p>\n<p>#svn客户端</p>\n<p>1.安装</p>\n<p>软件TortoiseSVN-1.9.4.27285-x64-svn-1.9.4</p>\n<p>按提示安装</p>\n<p>2.检出<br>输入 访问地址 <a href=\"http://TESTSWSVN:8081/svn/TestCode\" target=\"_blank\" rel=\"external\">http://TESTSWSVN:8081/svn/TestCode</a><br>根据提示输入用户名 密码。</p>\n<p>3.提交，<br>首先add到本地svn<br>然后更新，提交。</p>\n"},{"title":"数据并行与任务并行","url":"http://mingzhengjia.coding.me/2016/12/08/数据并行与任务并行/","content":"<h1 id=\"数据并行\"><a href=\"#数据并行\" class=\"headerlink\" title=\"数据并行\"></a>数据并行</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p> 是指同时对不同数据项完成相同操作的并行，并行量随着数据规模而增长。</p>\n<h2 id=\"举例\"><a href=\"#举例\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p> 数据并行即将相同的操作同时作用于不同的数据，数据并行编程模型提供给编程者一个全局的地址空间，一般这种形式的语言本身就提供并行执行的语义，因此对于编程者来说，只需要简单地指明执行什么样的并行操作和并行操作的对象，就实现了数据并行的编程<br>　　比如对于数组运算，使得数组B和C的对应元素相加后送给A，则通过语句<br>　　　　A=B+C（或其它的表达方式）<br>就能够实现上述功能，使并行机对B、C的对应元素并行相加，并将结果并行赋给A。因此数据并行的表达是相对简单和简洁的，它不需要编程者关心并行机是如何对该操作进行并行执行的。 </p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>[] array1 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">45</span>, <span class=\"number\">36</span>, <span class=\"number\">18</span>, <span class=\"number\">53</span>, <span class=\"number\">72</span>, <span class=\"number\">30</span>, <span class=\"number\">48</span>, <span class=\"number\">93</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">int</span>[] array2 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">3</span>, <span class=\"number\">46</span>, <span class=\"number\">3</span>, <span class=\"number\">53</span>, <span class=\"number\">72</span>, <span class=\"number\">30</span>, <span class=\"number\">48</span>, <span class=\"number\">93</span>, <span class=\"number\">15</span>, <span class=\"number\">3</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">int</span>[] array3 = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</div><div class=\"line\">Parallel.For(<span class=\"number\">0</span>, array1.Length, i =&gt; &#123;</div><div class=\"line\">    array3[i] = array1[i] + array2[i];</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>输出结果：<br><code>array3= {48,82,21,106,144,60,96,186,30,6}；</code></p>\n<h1 id=\"任务并行\"><a href=\"#任务并行\" class=\"headerlink\" title=\"任务并行\"></a>任务并行</h1><h2 id=\"任务并行性则是指您有多个任务需要完成。\"><a href=\"#任务并行性则是指您有多个任务需要完成。\" class=\"headerlink\" title=\"任务并行性则是指您有多个任务需要完成。\"></a>任务并行性则是指您有多个任务需要完成。</h2><h2 id=\"举例-1\"><a href=\"#举例-1\" class=\"headerlink\" title=\"举例\"></a>举例</h2><p>例如您有一个很大的数据集，您想知道该数据集的最小值、最大值和平均值。这只是一个简单的例子，但您可以让不同的处理器针对同一个数据集分别计算不同的答案。因此，任务并行性是一种不同的看待问题的方式，它不是通过数据分解让不同的处理器同时做同一项工作，而是对任务进行分解。</p>\n<h2 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> T Min&lt;T&gt;(T[] items)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> items.Min();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> T Max&lt;T&gt;(T[] items) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> items.Max();</div><div class=\"line\">&#125;</div><div class=\"line\">Task&lt;<span class=\"keyword\">int</span>&gt; leftTask = Task.Run(() =&gt; mx.Max(<span class=\"built_in\">array</span>));</div><div class=\"line\">Task&lt;<span class=\"keyword\">int</span>&gt; rightTask = Task.Run(() =&gt; mx.Min(<span class=\"built_in\">array</span>));</div><div class=\"line\">Task.WaitAll(leftTask, rightTask);</div><div class=\"line\">Console.WriteLine(leftTask.Result);</div><div class=\"line\">Console.WriteLine(rightTask.Result);</div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AsyncOperation</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    Console.WriteLine(<span class=\"string\">\"AsyncOperation\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">ThreadPool.QueueUserWorkItem(AsyncOperation);</div></pre></td></tr></table></figure>"},{"title":"多线程基础","url":"http://mingzhengjia.coding.me/2016/11/24/多线程基础1/","content":"<h1 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h1><h2 id=\"简介及概念\"><a href=\"#简介及概念\" class=\"headerlink\" title=\"简介及概念\"></a>简介及概念</h2><p>所有示例都假定已经引用了以下命名空间：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">using</span> System;</div><div class=\"line\"><span class=\"keyword\">using</span> System.Threading;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> ThreadTest</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">    Thread t = <span class=\"keyword\">new</span> Thread (WriteY);  <span class=\"comment\">// 创建新线程</span></div><div class=\"line\">    t.Start();                       <span class=\"comment\">// 启动新线程，执行WriteY()</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 同时，在主线程做其它事情</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) Console.Write (<span class=\"string\">\"x\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WriteY</span><span class=\"params\">()</span></span></div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) Console.Write (<span class=\"string\">\"y\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyy</div><div class=\"line\">xxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyy</div><div class=\"line\">yyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxx</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>主线程创建了一个新线程t来不断打印字母 “ y “，与此同时，主线程在不停打印字母 “ x “。</p>\n<p><img src=\"http://p1.bqimg.com/567571/a66e5969685250b9.png\" alt=\"\"></p>\n<p>举个例子，为什么用多线程</p>\n<p>如 统计3的个数问题。<br>在单线程中我们可以这样写<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Count3s4Single</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">array</span>.Length; i++) &#123;</div><div class=\"line\">    \t<span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">    \t\t++count;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> count;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实我们可以并行实现，将数组划分一下，使得每个线程负责1/t数组的统计3的个数的工作，其中t是线程数。</p>\n<p><img src=\"http://i1.piimg.com/567571/9720954efa0448e2.png\" alt=\"\"></p>\n<p>来看代码：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">int</span>[] <span class=\"built_in\">array</span> = &#123; <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span> &#125;;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"number\">_</span>threadNums = <span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"number\">_</span>count = <span class=\"number\">0</span>;</div><div class=\"line\">Thread[] threads = <span class=\"keyword\">new</span> Thread[<span class=\"number\">_</span>threadNums];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">Count3s4Thread</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"number\">_</span>count = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">_</span>threadNums; i++) &#123;</div><div class=\"line\">    \tthreads[i] = <span class=\"keyword\">new</span> Thread(() =&gt; count3s_threadUnsafe(i));</div><div class=\"line\">        threads[i].Start();</div><div class=\"line\">        threads[i].Join();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">_</span>count;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count3s_threadUnsafe</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> lengthPerthread = <span class=\"built_in\">array</span>.Length / <span class=\"number\">_</span>threadNums;</div><div class=\"line\">    <span class=\"keyword\">int</span> start = id * lengthPerthread;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; start + lengthPerthread; i++) &#123;</div><div class=\"line\">    \t<span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">        \t<span class=\"number\">_</span>count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上边代码有一个问题就是_count变量会出现竞争条件，一般情况下得不到正确的值，原因是在进行加法的时候可能会出现两个线程同时访问。<br>造成结果不一致。</p>\n<p>来看一个线程安全的版本</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"keyword\">private</span> readonly object <span class=\"number\">_</span>thisLock = <span class=\"keyword\">new</span> object();</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count3s_threadSafe1</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> lengthPerthread = <span class=\"built_in\">array</span>.Length / <span class=\"number\">_</span>threadNums;</div><div class=\"line\">     <span class=\"keyword\">int</span> start = id * lengthPerthread;</div><div class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; start + lengthPerthread; i++) &#123;</div><div class=\"line\">         <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">             lock (<span class=\"number\">_</span>thisLock) &#123;</div><div class=\"line\">\t\t\t <span class=\"number\">_</span>count++;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;        </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>来看看AutoResetEvent类</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Program &#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AutoResetEvent <span class=\"number\">_</span>workerEvent = <span class=\"keyword\">new</span> AutoResetEvent(<span class=\"literal\">false</span>);</div><div class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> AutoResetEvent <span class=\"number\">_</span>mainEvent = <span class=\"keyword\">new</span> AutoResetEvent(<span class=\"literal\">false</span>);</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span>&#123;</div><div class=\"line\">       var t = <span class=\"keyword\">new</span> Thread(() =&gt; Process(<span class=\"number\">10</span>));</div><div class=\"line\">       t.Start();</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"开始等待另一个工作完成，调用WaitOne()方法阻塞当前线程\"</span>);</div><div class=\"line\">       <span class=\"number\">_</span>workerEvent.WaitOne();</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"第一个操作已经完成\"</span>);</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"开始执行主线程，要工作5秒\"</span>);</div><div class=\"line\">       Thread.Sleep(TimeSpan.FromSeconds(<span class=\"number\">5</span>));</div><div class=\"line\">       <span class=\"number\">_</span>mainEvent.Set();</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"现在工作线程开始运行第二个操作\"</span>);</div><div class=\"line\">       <span class=\"number\">_</span>workerEvent.WaitOne();</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"第二个操作完成!\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Process</span><span class=\"params\">(<span class=\"keyword\">int</span> seconds)</span> </span>&#123;</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"Hi，主线程，我是工作线程的第一个工作，开始一个很长时间的操作\"</span>);</div><div class=\"line\">       Thread.Sleep(TimeSpan.FromSeconds(seconds));</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"工作了\"</span>+seconds+<span class=\"string\">\"秒， 第一个工作完成，发个信号给主线程\"</span>);</div><div class=\"line\">       <span class=\"number\">_</span>workerEvent.Set();</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"等待主线程完成工作\"</span>);</div><div class=\"line\">       <span class=\"number\">_</span>mainEvent.WaitOne();</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"Hi，主线程，我是工作线程的第二个工作，现在我开始第二个工作\"</span>);</div><div class=\"line\">       Thread.Sleep(TimeSpan.FromSeconds(seconds));</div><div class=\"line\">       Console.WriteLine(<span class=\"string\">\"第二个工作完成，发个信号给主线程\"</span>);</div><div class=\"line\">       <span class=\"number\">_</span>workerEvent.Set();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>来看看死锁</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Program</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object objA = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object objB = <span class=\"keyword\">new</span> Object();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">LockA</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        lock (objA)&#123;</div><div class=\"line\">            Thread.Sleep(<span class=\"number\">1000</span>);</div><div class=\"line\">            lock (objB)&#123;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"LockA\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">LockB</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        lock (objA)&#123;</div><div class=\"line\">            Thread.Sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">            lock (objB)&#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Console.WriteLine(<span class=\"string\">\"LockB\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">    \tThread threadA = <span class=\"keyword\">new</span> Thread(LockA);</div><div class=\"line\">        Thread threadB = <span class=\"keyword\">new</span> Thread(LockB);</div><div class=\"line\">        threadA.Start();</div><div class=\"line\">        threadB.Start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>统计3另一种解答<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] private_count = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">_</span>threadNums];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count3s_threadSafe2</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> lengthPerthread = <span class=\"built_in\">array</span>.Length / <span class=\"number\">_</span>threadNums;</div><div class=\"line\">    <span class=\"keyword\">int</span> start = id * lengthPerthread;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; start + lengthPerthread; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">array</span>[i] == <span class=\"number\">3</span>) &#123;</div><div class=\"line\">            private_count[id]++;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    lock (<span class=\"number\">_</span>thisLock) &#123;</div><div class=\"line\">        <span class=\"number\">_</span>count += private_count[id];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Join and sleep</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  Thread t = <span class=\"keyword\">new</span> Thread (Go);</div><div class=\"line\">  t.Start();</div><div class=\"line\">  t.Join();</div><div class=\"line\">  Console.WriteLine (<span class=\"string\">\"Thread t has ended!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Go</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</div><div class=\"line\">      Thread.Sleep(<span class=\"number\">500</span>);</div><div class=\"line\">      Console.Write (<span class=\"string\">\"y\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> EventWaitHandle <span class=\"number\">_</span>ready = <span class=\"keyword\">new</span> AutoResetEvent(<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"keyword\">static</span> EventWaitHandle <span class=\"number\">_</span>go = <span class=\"keyword\">new</span> AutoResetEvent(<span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"number\">_</span>message;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span><span class=\"params\">(<span class=\"built_in\">string</span>[] args)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> Thread(Work).Start();</div><div class=\"line\">    <span class=\"number\">_</span>ready.WaitOne();                  <span class=\"comment\">// 首先等待工作线程就绪</span></div><div class=\"line\">    <span class=\"number\">_</span>message = <span class=\"string\">\"ooo\"</span>;</div><div class=\"line\">    <span class=\"number\">_</span>go.Set();                         <span class=\"comment\">// 通知工作线程执行</span></div><div class=\"line\">    <span class=\"number\">_</span>ready.WaitOne();</div><div class=\"line\">    <span class=\"number\">_</span>message = <span class=\"string\">\"hhh\"</span>;  <span class=\"comment\">// 给工作线程其它信息</span></div><div class=\"line\">    <span class=\"number\">_</span>go.Set();</div><div class=\"line\">    <span class=\"number\">_</span>ready.WaitOne();</div><div class=\"line\">    <span class=\"number\">_</span>message = null;    <span class=\"comment\">// 发信号通知工作线程退出</span></div><div class=\"line\">    <span class=\"number\">_</span>go.Set();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">       <span class=\"number\">_</span>ready.Set();                          <span class=\"comment\">// 表示我们准备好了</span></div><div class=\"line\">      <span class=\"number\">_</span>go.WaitOne();                         <span class=\"comment\">// 等待开始</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"number\">_</span>message == null) <span class=\"keyword\">return</span>;        <span class=\"comment\">// 优雅地退出</span></div><div class=\"line\">      Console.WriteLine(<span class=\"number\">_</span>message);</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"单例模式","url":"http://mingzhengjia.coding.me/2016/11/22/单例模式/","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><h2 id=\"意图\"><a href=\"#意图\" class=\"headerlink\" title=\"意图\"></a>意图</h2><p> 保证一个类仅有一个实例，并提供一个人访问它的全局访问点</p>\n<h2 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h2><p>在我们日常的工作中经常需要在应用程序中保持一个唯一的实例，如：IO处理，数据库操作等，由于这些对象都要占用重要的系统资源，所以我们必须限制这些实例的创建或始终使用一个公用的实例。<br>如何保证一个类只有一个实例并且这个实例易于被访问呢？定义一个全局变量可以确保对象随时都可以被访问，但不能防止我们实例化多个对象。一个更好的解决办法是让类自身负责保存它的唯一实例。这个类可以保证没有其他实例被创建，并且它可以提供一个访问该实例的方法。这就是单例模式。</p>\n<h2 id=\"适用性\"><a href=\"#适用性\" class=\"headerlink\" title=\"适用性\"></a>适用性</h2><ul>\n<li>当类只能有一个实例而且客户可以从一个众所周知的访问点访问它时。</li>\n<li>当这个唯一实例应该是通过子类化可扩展的，并且客户应该无需更改代码就能使用一个扩展的实例时。</li>\n</ul>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><p>它拥有一个私有构造函数，这确保用户无法通过new直接实例它。除此之外，该模式中包含一个静态私有成员变量instance与静态公有方法Instance()。Instance()方法负责检验并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建。<br>如图所示：</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"简单实现\"><a href=\"#简单实现\" class=\"headerlink\" title=\"简单实现\"></a>简单实现</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Singleton &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton <span class=\"number\">_</span>instance = null;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></div><div class=\"line\">    <span class=\"comment\">/// Prevents a default instance of the </span></div><div class=\"line\">    <span class=\"comment\">/// &lt;see cref=\"Singleton\"/&gt; class from being created.</span></div><div class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span></div><div class=\"line\">    &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></div><div class=\"line\">    <span class=\"comment\">/// Gets the instance.</span></div><div class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance</div><div class=\"line\">    &#123;</div><div class=\"line\">        get &#123; <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance ?? (<span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> Singleton()); &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上述的实现方式适用于单线程环境，因为在多线程环境下有可能会得到多个实例，如果同时有两个线程去判断（instance == null），并且得到的结果为真，这时两个线程都会创建类Singleton的实例，这样就违背了Singleton模式的原则。实际上在上述代码中，有可能在计算出表达式的值之前，对象实例已经被创建，但是内存模型并不能保证对象实例在第二个线程创建之前被发现。</p>\n<h3 id=\"线程安全实现（1）\"><a href=\"#线程安全实现（1）\" class=\"headerlink\" title=\"线程安全实现（1）\"></a>线程安全实现（1）</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></div><div class=\"line\"><span class=\"comment\">/// A thread-safe singleton class.</span></div><div class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> Singleton</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton <span class=\"number\">_</span>instance = null;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> readonly object SynObject = <span class=\"keyword\">new</span> object();</div><div class=\"line\"></div><div class=\"line\">    Singleton()</div><div class=\"line\">    &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></div><div class=\"line\">    <span class=\"comment\">/// Gets the instance.</span></div><div class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance</div><div class=\"line\">    &#123;</div><div class=\"line\">        get</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// Syn operation.</span></div><div class=\"line\">            lock (SynObject)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance ?? (<span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> Singleton());</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p> 以上方式的实现方式是线程安全的，首先我们创建了一个静态只读的进程辅助对象，由于lock是确保当一个线程位于代码的临界区时，另一个线程不能进入临界区（同步操作）。如果其他线程试图进入锁定的代码，则它将一直等待，直到该对象被释放。从而确保在多线程下不会创建多个对象实例了。只是这种实现方式要进行同步操作，这将是影响系统性能的瓶颈和增加了额外的开销。</p>\n<h3 id=\"线程安全实现-2-双重锁定\"><a href=\"#线程安全实现-2-双重锁定\" class=\"headerlink\" title=\"线程安全实现(2) 双重锁定\"></a>线程安全实现(2) 双重锁定</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></div><div class=\"line\"><span class=\"comment\">/// Double-Checked Locking implements a thread-safe singleton class</span></div><div class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></div><div class=\"line\"><span class=\"keyword\">public</span> sealed <span class=\"keyword\">class</span> Singleton</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton <span class=\"number\">_</span>instance = null;</div><div class=\"line\">    <span class=\"comment\">// Creates an syn object.</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> readonly object SynObject = <span class=\"keyword\">new</span> object();</div><div class=\"line\"></div><div class=\"line\">    Singleton()</div><div class=\"line\">    &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance &#123;</div><div class=\"line\">        get&#123;</div><div class=\"line\">            <span class=\"comment\">// Double-Checked Locking</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>instance)&#123;</div><div class=\"line\">                lock (SynObject)&#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (null == <span class=\"number\">_</span>instance)&#123;</div><div class=\"line\">                        <span class=\"number\">_</span>instance = <span class=\"keyword\">new</span> Singleton();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">_</span>instance;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种实现方式对多线程来说是安全的，同时线程不是每次都加锁，只有判断对象实例没有被创建时它才加锁，有了我们上面第一部分的里面的分析，我们知道，加锁后还得再进行对象是否已被创建的判断。它解决了线程并发问题，同时避免在每个 Instance 属性方法的调用中都出现独占锁定。它还允许您将实例化延迟到第一次访问对象时发生。实际上，应用程序很少需要这种类型的实现。大多数情况下我们会用静态初始化。这种方式仍然有很多缺点：无法实现延迟初始化。</p>\n<h3 id=\"线程安全实现-3-静态初始化\"><a href=\"#线程安全实现-3-静态初始化\" class=\"headerlink\" title=\"线程安全实现(3) 静态初始化\"></a>线程安全实现(3) 静态初始化</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> sealed <span class=\"keyword\">class</span> Singleton</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> readonly Singleton instance=<span class=\"keyword\">new</span> Singleton();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Singleton()&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton Instance&#123;</div><div class=\"line\">        get&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> instance;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式一旦被初始化，就不会在被实例化，所以符合单例模式。因为静态构造函数由 .NET Framework 负责执行初始化。在大多数情况下，静态初始化是在 .NET 中实现 Singleton 的首选方法。</p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>最近在项目中逐渐用到了单例模式。 在我的项目中，主要与下位机软件进行TCP通信。因此封装了一个TCPHelper的类用于与下位机通信，在其他的类中需要使用TCPHelper的成员函数，但是又不能每次都实例化，这样与下位机软件通信可能出现多次连接。因此，将TCPHelper封装成单例模式。</p>\n"},{"title":"C#编译时常量与运行时常量","url":"http://mingzhengjia.coding.me/2016/10/16/CSharp编译时常量与运行时常量/","content":"<h3 id=\"Effectiv-C-编译时常量-与-运行时常量\"><a href=\"#Effectiv-C-编译时常量-与-运行时常量\" class=\"headerlink\" title=\"Effectiv C# 编译时常量 与 运行时常量\"></a>Effectiv C# 编译时常量 与 运行时常量</h3><p>　C#语言中有两种类型的常量:编译期常量和运行时常量。应该尽量使用运行时常量，而不是编译期常量。虽然编译期常量略快一些，但是没有运行时常量那么灵活。应仅仅在那些性能异常敏感，且常量的值在各个版本之间绝对不会变化时，才使用编译器常量。</p>\n<ul>\n<li>运行时常量使用readonly关键字声明，编译时常量使用const关键字声明:</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//编译时常量,可以声明在方法中</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Millennium = <span class=\"number\">2000</span>;</div><div class=\"line\"><span class=\"comment\">//运行时常量，不能声明在方法中</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> readonly <span class=\"keyword\">int</span> ThisYear = <span class=\"number\">2012</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>运行时常量（readonly）和编译时常量（const）的不同</li>\n</ul>\n<p>　二者的不同之处在于对它们的访问方式不同。编译时常量的值是在在目标代码中进行替换的，以下两个构造生产的IL代码时一样的:<br><code>if(myDateTime.Year == Millennium)</code><br><code>if(myDateTime.Year == 2000)</code><br>这也就导致了编译期常量仅能用于基本类型(内建的整数和浮点类型)、枚举或字符串。在编译后得到的IL代码中，只有这些常量可以直接被替换成为它们的字面值。</p>\n<p>而运行时常量将在运行时求值，在构造函数执行后不能被再次修改。引用运行时常量生成的IL将引用到readonly的变量，而不是变量本身的值(灵活)。<br>二者的区别在于：readonly的值将在运行时给出，这会带来更好的灵活性。例如，运行时常量可以为任意类型。readonly字段必须在构造函数或初始化器中初始化,而 const 字段只能在该字段的声明中初始化。</p>\n<p>我们可以做一个假设:在一个名为Customer的程序集中分别定义了一个const字段和readonly字段：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Customer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> readonly <span class=\"keyword\">int</span> StartValue = <span class=\"number\">5</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> EndValue = <span class=\"number\">10</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在另一个程序集中引用了这两个值，当我们过了一段时间需要更新Customer程序集的这两个字段将值更改：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Customer</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> readonly <span class=\"keyword\">int</span> StartValue = <span class=\"number\">15</span>;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> EndValue = <span class=\"number\">20</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>随后，分发Customer程序集，而没有重新编译整个应用程序时，我们可以发现在并没有重写编译整个应用程序的情况下所以引用了readonly字段的值变成了我们更新的值，而其他引用了const字段的值却没有更新。</p>\n<p>这是因为:编译器第一次编译应用程序的时候：将所有引用了const字段的变量的值替换成了它对应的常量值(5）；对应所有引用readonly字段的变量来说引用的是这个声明为readonly的字段，而不是其字面值。</p>\n<p>所以说若想修改所有使用readonly的客户代码的行为，只需要简单的更新一下这个声明了readonly字段的程序集就可以了。而想要更新所有使用const的客户代码的行为则需要重新编译整个应用程序。</p>\n<ul>\n<li>小结</li>\n</ul>\n<p>只有在编译期必须获得确定数值时一定要使用const。例如特性（attribute）的参数和枚举的定义等，还有那些在各个版本发布之间不会变化的值。在除此之外的所以情况下，都应该经理选择更加灵活的readonly常量。</p>\n"},{"title":"MVVMLight使用技术——命令绑定","url":"http://mingzhengjia.coding.me/2016/10/16/MVVMLight-Commad/","content":"<h2 id=\"MVVM命令绑定\"><a href=\"#MVVM命令绑定\" class=\"headerlink\" title=\"MVVM命令绑定\"></a>MVVM命令绑定</h2><p>命令绑定要关注的核心就是两个方面的问题，命令能否执行和命令怎么执行。也就是说当View中的一个Button绑定了ViewModel中一个命令后，什么时候这个Button是可用的，按下Button后执行什么操作。解决了这两个问题基本就实现了命令绑定。另外一个问题就是执行过程中需要的数据（参数）要如何传递。<br>在MVVMlight中，其帮助我们实现了RelayCommand类，其使用方法如<br> RelayCommand(传入要执行的方法, 传入判断命令是否可执行的方法);<br>比如在ViewModel中：<br><img src=\"http://p1.bqimg.com/567571/608869e0588798cd.png\" alt=\"\"><br>Delete就是其要执行的方法。<br><img src=\"http://p1.bqimg.com/567571/08b4387b89b01f79.png\" alt=\"\"></p>\n<p>在View页面中<br><img src=\"http://p1.bqimg.com/567571/c76c09efcec33ac1.png\" alt=\"\"></p>\n<p>点击删除的button就会执行<code>Delete</code>函数</p>\n<h3 id=\"下载链接\"><a href=\"#下载链接\" class=\"headerlink\" title=\"下载链接\"></a>下载链接</h3><p><a href=\"https://github.com/mingzhengjia/UseMVVMlight\" target=\"_blank\" rel=\"external\">源码请戳</a></p>\n<h3 id=\"啥都会一点，啥都不精\"><a href=\"#啥都会一点，啥都不精\" class=\"headerlink\" title=\"啥都会一点，啥都不精\"></a>啥都会一点，啥都不精</h3><p><em>C#,C/C++,Java,ABAP,Android,SSH,.Net,Unity3D, SAP</em></p>\n"},{"title":"MVVMLight使用技术——多线程","url":"http://mingzhengjia.coding.me/2016/10/16/MVVM多线程/","content":"<h2 id=\"ObservableCollection-多线程操作\"><a href=\"#ObservableCollection-多线程操作\" class=\"headerlink\" title=\"ObservableCollection 多线程操作\"></a>ObservableCollection<t> 多线程操作</t></h2><p>今天写代码过程中遇到使用多线程向ObservableCollection<t> 的对象中添加数据，开始总会弹出如下错误： 该类型的 CollectionView 不支持从调度程序线程以外的线程对其 SourceCollection 进行的更改<br><img src=\"http://i1.piimg.com/567571/05e64b7a8c59d3a5.png\" alt=\"\"></t></p>\n<p>搜了下资料在ViewModel中添加如下代码即可：<br>  <code>private readonly Dispatcher _dispatcher = Dispatcher.CurrentDispatcher;\n _dispatcher.Invoke(DispatcherPriority.Normal, new Action(() =&gt; {\n                dosometing\n            }));</code></p>\n<h3 id=\"下载链接\"><a href=\"#下载链接\" class=\"headerlink\" title=\"下载链接\"></a>下载链接</h3><p><a href=\"https://github.com/mingzhengjia/UseMVVMlight\" target=\"_blank\" rel=\"external\">源码请戳</a></p>\n<h3 id=\"啥都会一点，啥都不精\"><a href=\"#啥都会一点，啥都不精\" class=\"headerlink\" title=\"啥都会一点，啥都不精\"></a>啥都会一点，啥都不精</h3><p><em>C#,C/C++,Java,ABAP,Android,SSH,.Net,Unity3D, SAP</em></p>\n"},{"title":"剑指offer——二进制表示中1的个数","url":"http://mingzhengjia.coding.me/2016/10/16/剑指offer_二进制表示1的个数/","content":"<h2 id=\"二进制中1的个数\"><a href=\"#二进制中1的个数\" class=\"headerlink\" title=\"二进制中1的个数\"></a>二进制中1的个数</h2><h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> Solution &#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">     <span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">NumberOf1</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> countn =<span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">while</span>(n)</div><div class=\"line\">    &#123;</div><div class=\"line\">        countn++;</div><div class=\"line\">        n = n&amp;(n<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> countn;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"title":"MVVMLight使用技术——绑定数据","url":"http://mingzhengjia.coding.me/2016/10/16/MVVMLight/","content":"<h2 id=\"MVVM绑定数据\"><a href=\"#MVVM绑定数据\" class=\"headerlink\" title=\"MVVM绑定数据\"></a>MVVM绑定数据</h2><p>View与ViewModel之间的关联就是通过View的DataContext 属性来关联。<br>View与ViewModel之间的绑定可以通过如下图所示来建立联系<br><img src=\"http://i1.piimg.com/567571/a71a7cbcce1c8b69.png\" alt=\"\"><br>或者在前台绑定，具体方法百度多的很，就不介绍了，我比较习惯于在后台几句简短代码，这样比较可控。<br>数据的绑定是通过INotifyPropertyChanged接口来实现的，它就像一个大喇叭一样，我们实现了这个接口，就可以通过触发PropertyChanged事件并给出改变的数据源的对象和属性名称，以此来通知数据的变化。<br>这部分代码一般都会实现一个基类。<br>ObservableCollection<t>集合，实际上和List<t>并无太多区别，较好的是，可以将数据项的添加、删除等反映到View中绑定的控件上而无需我们做任何操作。节约了大量的性能。</t></t></p>\n<p>比如：<br><code>ViewModel</code><br><img src=\"http://p1.bpimg.com/4851/59853f93b887d344.png\"></p>\n<p><code>View</code><br><img src=\"http://i1.piimg.com/4851/8d3fba62b4a73b22.png\"></p>\n<p>在后台(ViewModel）只需要操作<code>StyleNum</code>这个属性。前台绑定了该属性的值就会根据后台的变化而变化。同样，前台的绑定了<code>StyleNum</code>属性的控件的变化也会改变后台(ViewModel）的属性。</p>\n<h3 id=\"下载链接\"><a href=\"#下载链接\" class=\"headerlink\" title=\"下载链接\"></a>下载链接</h3><p><a href=\"https://github.com/mingzhengjia/UseMVVMlight\" target=\"_blank\" rel=\"external\">源码请戳</a></p>\n<h3 id=\"啥都会一点，啥都不精\"><a href=\"#啥都会一点，啥都不精\" class=\"headerlink\" title=\"啥都会一点，啥都不精\"></a>啥都会一点，啥都不精</h3><p><em>C#,C/C++,Java,ABAP,Android,SSH,.Net,Unity3D, SAP</em></p>\n"},{"title":"Fo-dicom 使用技术文档","url":"http://mingzhengjia.coding.me/2016/10/08/fo-dicom/","content":"<h1 id=\"Fo-dicom-使用技术文档\"><a href=\"#Fo-dicom-使用技术文档\" class=\"headerlink\" title=\"Fo-dicom 使用技术文档\"></a>Fo-dicom 使用技术文档</h1><h2 id=\"官方文档\"><a href=\"#官方文档\" class=\"headerlink\" title=\"官方文档\"></a>官方文档</h2><p>网址：<a href=\"https://github.com/fo-dicom/fo-dicom\" target=\"_blank\" rel=\"external\">https://github.com/fo-dicom/fo-dicom</a><br>托管在github上。</p>\n<h2 id=\"官方例子\"><a href=\"#官方例子\" class=\"headerlink\" title=\"官方例子\"></a>官方例子</h2><h3 id=\"Dicom文件基本操作\"><a href=\"#Dicom文件基本操作\" class=\"headerlink\" title=\"Dicom文件基本操作\"></a>Dicom文件基本操作</h3><p><code>var file = DicomFile.Open(@&quot;test.dcm&quot;);             // 打开文件</code><br><code>var file = await DicomFile.OpenAsync(@&quot;test.dcm&quot;);  // 异步打开</code></p>\n<p>file中保存了dicomFile信息。</p>\n<p><code>var dataSet =file.Dataset();  // dataSet中保存的是dcm的基本数据，标签信息及piexldata信息。</code></p>\n<p>读取标签<br><code>var patientid = file.Dataset.Get&lt;string&gt;(DicomTag.PatientID);</code></p>\n<p>添加并修改标签<br><code>file.Dataset.Add(DicomTag.PatientsName, &quot;DOE^JOHN&quot;);</code></p>\n<p>改变TransferSyntax属性，用图像数据的压缩等。<br><code>file = file.ChangeTransferSyntax(DicomTransferSyntax.JPEGProcess14SV1);</code></p>\n<p><code>file.Save(@&quot;output.dcm&quot;);             // 保存文件到本地</code><br><code>file.Dataset.Remove(DicomTag.PixelData); 删除标签</code></p>\n<h3 id=\"图像操作\"><a href=\"#图像操作\" class=\"headerlink\" title=\"图像操作\"></a>图像操作</h3><p>图像数据存贮在PixelData中，根据其DicomTag.NumberOfFrames帧数的设置，可知其有多少帧图像数据。获取第一帧图像数据可用<br><code>var pixel = DicomPixelData.Create(file.Dataset);</code><br><code>var frame = pixel.GetFrame(0);</code>得到第一帧数据，可在此数据中进行设置，或者这样idx第几帧<br><code>var header = DicomPixelData.Create(dataset);</code><br><code>var pixelData = PixelDataFactory.Create(header, idx);</code></p>\n<h3 id=\"图像压缩解决方案\"><a href=\"#图像压缩解决方案\" class=\"headerlink\" title=\"图像压缩解决方案\"></a>图像压缩解决方案</h3><p>可使用 <code>file = file.ChangeTransferSyntax(DicomTransferSyntax.ExplicitVRLittleEndian);</code><br>进行解压缩。<br>然后在设置 <code>file = file.ChangeTransferSyntax(DicomTransferSyntax.JPEG2000Lossless);</code>进行压缩。</p>\n<h3 id=\"图像显示\"><a href=\"#图像显示\" class=\"headerlink\" title=\"图像显示\"></a>图像显示</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var image = <span class=\"keyword\">new</span> DicomImage(@<span class=\"string\">\"test.dcm\"</span>);</div><div class=\"line\">image.RenderImage().AsBitmap().Save(@<span class=\"string\">\"test.jpg\"</span>);     <span class=\"comment\">// Windows Forms</span></div><div class=\"line\">ImageManager.SetImplementation(WPFImageManager.Instance);</div><div class=\"line\"> (WriteableBitmap) image.RenderImage().AsWriteableBitmap();</div></pre></td></tr></table></figure>\n"},{"title":"about","url":"http://mingzhengjia.coding.me/about/index.html","content":""},{"title":"Resume","url":"http://mingzhengjia.coding.me/Resume/index.html","content":"<h2 id=\"Welcome-to-Mingzheng-Jia\"><a href=\"#Welcome-to-Mingzheng-Jia\" class=\"headerlink\" title=\"Welcome to Mingzheng Jia\"></a>Welcome to Mingzheng Jia</h2><h3 id=\"被腐化\"><a href=\"#被腐化\" class=\"headerlink\" title=\"被腐化\"></a>被腐化</h3><ul>\n<li><strong>2013-2016</strong> &nbsp;&nbsp;<a href=\"http://www.swjtu.edu.cn\" target=\"_blank\" rel=\"external\">SWJTU</a>&nbsp;&nbsp;Software Engineering </li>\n<li><strong>2009-2013</strong> &nbsp;&nbsp;<a href=\"http://www.swjtu.edu.cn\" target=\"_blank\" rel=\"external\">SWJTU</a>&nbsp;&nbsp;Computer Software</li>\n</ul>\n<h3 id=\"赚奶粉钱\"><a href=\"#赚奶粉钱\" class=\"headerlink\" title=\"赚奶粉钱\"></a>赚奶粉钱</h3><ul>\n<li><strong>2016.7-Now</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"http://www.sibet.ac.cn\" target=\"_blank\" rel=\"external\">SIBET</a> &nbsp;&nbsp; Research Assistant</li>\n<li><strong>2015.4-2015.9</strong> &nbsp;&nbsp;<a href=\"http://www.corning.com/\" target=\"_blank\" rel=\"external\">Corning</a> &nbsp;&nbsp; Intern of IT</li>\n<li><strong>2013.7-2014.1</strong> &nbsp;&nbsp;<a href=\"http://www.scsics.com/\" target=\"_blank\" rel=\"external\">SCICS</a> &nbsp;&nbsp; Intern</li>\n</ul>\n<h3 id=\"啥都会，啥都不精\"><a href=\"#啥都会，啥都不精\" class=\"headerlink\" title=\"啥都会，啥都不精\"></a>啥都会，啥都不精</h3><p><em>C#,C/C++,Java,ABAP,Android,SSH,.Net,Unity3D, SAP,html</em></p>\n<h3 id=\"来呀，来呀，骚扰我\"><a href=\"#来呀，来呀，骚扰我\" class=\"headerlink\" title=\"来呀，来呀，骚扰我\"></a>来呀，来呀，骚扰我</h3><p>Email：mingzhengjia@gmail.com</p>\n"},{"title":"categories","url":"http://mingzhengjia.coding.me/categories/index.html","content":""},{"title":"tags","url":"http://mingzhengjia.coding.me/tags/index.html","content":""},{"title":"about","url":"http://mingzhengjia.coding.me/about/about.html","content":"<p>&lt;!DOCTYPE html&gt;</p>\n  <html class=\"light page-about\"><br><br><br><head><br>  <meta charset=\"utf-8\"><br><br>  <title>about | Mingzheng</title><br><br>  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"><br><br><br>    <meta name=\"keywords\" content=\"mingzhengjia,前端,设计,Hexo主题,前端开发,用户体验,设计,frontend,design,nodejs,JavaScript\"><br><br><br>  <meta property=\"og:type\" content=\"website\"><br><meta property=\"og:title\" content=\"about\"><br><meta property=\"og:url\" content=\"http://mingzhengjia.coding.me/about/index.html\"><br><meta property=\"og:site_name\" content=\"Mingzheng\"><br><meta property=\"og:updated_time\" content=\"2016-10-15T10:00:53.831Z\"><br><meta name=\"twitter:card\" content=\"summary\"><br><meta name=\"twitter:title\" content=\"about\"><br><br><br><br><br>    <link rel=\"icon\" href=\"/favicon.ico\"><br><br><br>  <link href=\"/css/styles.css?v=028c63b1\" rel=\"stylesheet\"><br><br><br><br>    <link rel=\"stylesheet\" href=\"/css/personal-style.css\"><br><br><br><br><br><br>  <script type=\"text/javascript\"><br>    var _hmt = _hmt || [];<br>    (function() {<br>      var hm = document.createElement(“script”);<br>      hm.src = “//hm.baidu.com/hm.js?57e94d016e201fba3603a8a2b0263af0”;<br>      var s = document.getElementsByTagName(“script”)[0];<br>      s.parentNode.insertBefore(hm, s);<br>    })();<br>  </script><br><br><br></head><br><br><body><br><br><br><br>    <span id=\"toolbox-mobile\" class=\"toolbox-mobile\">Home</span><br><br><br>  <div class=\"content content-about\"><br>  <div class=\"page-header\"><br><br><br>    <div class=\"breadcrumb\"><br>    <a class=\"toolbox-entry\" href=\"/\"><br><br><br>      <i class=\"icon-home\"></i><br>    </a><br>      <div class=\"location\">About</div><br>      <i class=\"icon-location\"></i><br>    </div><br><br><br><br><br><br><br><br>  <div class=\"box-blog-info\"><br>    <a class=\"avatar\" href=\"/\"><br>      <img src=\"/images/avatar.png\" alt=\"\"><br>    </a><br>    <div class=\"info\"><br>      <h3 class=\"name\" style=\"font-family: calligraffittiregular\"><br>        mingzhengjia<br>      </h3><br>      <div class=\"slogan\"><br>        Beyond the pots and pans<br>      </div><br>    </div><br>  </div><br><br></div><br><br><br>  <ul class=\"about-list\"><br><br>      <li class=\"about-item\"><br><br>          <i class=\"icon icon-user dot dot-0\"></i><br><br><br><br><br>            <div class=\"text\">Scut，1991，Spring.</div><br><br>            <div class=\"text\">喜欢折腾，微微擅长编程.</div><br><br>            <div class=\"text\">桌面应用开发工程师，常用C#/WPF/C/C++</div><br><br><br><br>      </li><br><br>      <li class=\"about-item\"><br><br>          <i class=\"icon icon-github dot dot-1\"></i><br><br><br><br>          <div class=\"text\"><br>            <span>Github</span><br><br>              <a rel=\"noopener noreferrer\" target=\"_blank\" class=\"text-value-url\" href=\"https://github.com/mingzhengjia\">@mingzhengjia</a><br><br>          </div><br><br><br>      </li><br><br><br><br>      <li class=\"about-item\"><br><br>          <i class=\"icon icon-mail dot dot-3\"></i><br><br><br><br>          <div class=\"text\"><br>            <span>Gmail</span><br><br>              <a rel=\"noopener noreferrer\" target=\"_blank\" class=\"text-value-url\" href=\"mailto:mingzhengjia@gmail.com\">mingzhengjia@gmail.com</a><br><br>          </div><br><br><br>      </li><br><br>      <li class=\"about-item\"><br><br>          <i class=\"icon icon-location dot dot-4\"></i><br><br><br><br>          <div class=\"text\"><br>            <span></span><br><br>              <span>Suzhou</span><br><br>          </div><br><br><br>      </li><br><br>  </ul><br><br></div><br><br><br>  <a id=\"backTop\" class=\"back-top\"><br>    <i class=\"icon-angle-up\"></i><br>  </a><br><br><br><br><br><br><br><br><br><br><br>  <script type=\"text/javascript\"><br>  function loadScript(url, callback) {<br>    var script = document.createElement(‘script’)<br>    script.type = ‘text/javascript’;<br><br>    if (script.readyState) { //IE<br>      script.onreadystatechange = function() {<br>        if (script.readyState == ‘loaded’ ||<br>          script.readyState == ‘complete’) {<br>          script.onreadystatechange = null;<br>          callback();<br>        }<br>      };<br>    } else { //Others<br>      script.onload = function() {<br>        callback();<br>      };<br>    }<br><br>    script.src = url;<br>    document.getElementsByTagName(‘head’)[0].appendChild(script);<br>  }<br><br>  window.onload = function() {<br>    loadScript(‘/js/bundle.js?235683’, function() {<br>      // load success<br>    });<br>  }<br></script><br><br></body><br></html>\n"}]